name: Release
on:
   workflow_dispatch:
     inputs:
      tag:
        description: 'Release version (e.g. v0.1.0)'
        required: true

env:
  BUILD_PROFILE: debug
  RUST_TOOLCHAIN: nightly-2022-10-25  
  
jobs:
  build_runtime:
    runs-on: ubuntu-latest
    env:
      SUBWASM_VERSION: 0.18.0
    strategy:
      matrix:
        chain: [ "arctic" ]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Srtool build
        id: srtool_build
        uses: chevdor/srtool-actions@v0.6.0
        with:
          chain: ${{ matrix.chain }}

      - name: Summary
        shell: bash
        run: |
          echo '${{ steps.srtool_build.outputs.json }}' | jq > ${{ matrix.chain }}-srtool-digest.json
          cat ${{ matrix.chain }}-srtool-digest.json
          echo "Compact Runtime: ${{ steps.srtool_build.outputs.wasm }}"
          echo "Compressed Runtime: ${{ steps.srtool_build.outputs.wasm_compressed }}"

      - name: Install subwasm
        shell: bash
        run: |
          wget https://github.com/chevdor/subwasm/releases/download/v${{ env.SUBWASM_VERSION }}/subwasm_linux_amd64_v${{ env.SUBWASM_VERSION }}.deb
          sudo dpkg -i subwasm_linux_amd64_v${{ env.SUBWASM_VERSION }}.deb
          subwasm --version

      - name: Show Runtime information
        shell: bash
        run: |
          subwasm info ${{ steps.srtool_build.outputs.wasm }}
          subwasm info ${{ steps.srtool_build.outputs.wasm_compressed }}
          subwasm --json info ${{ steps.srtool_build.outputs.wasm }} > ${{ matrix.chain }}-info.json
          subwasm --json info ${{ steps.srtool_build.outputs.wasm_compressed }} > ${{ matrix.chain }}-compressed-info.json

      - name: Extract the metadata
        shell: bash
        run: |
          subwasm meta ${{ steps.srtool_build.outputs.wasm }}
          subwasm --json meta ${{ steps.srtool_build.outputs.wasm }} > ${{ matrix.chain }}-metadata.json

      - name: Check the metadata diff
        shell: bash
        run: |
          subwasm get https://${{ matrix.chain }}-rpc.icenetwork.io:9933 --output ${{ matrix.chain }}-live.wasm
          subwasm diff ${{ steps.srtool_build.outputs.wasm }} ${{ matrix.chain }}-live.wasm | \
            tee ${{ matrix.chain }}-diff.txt

      - name: Archive Subwasm results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.chain }}-runtime
          path: |
            ${{ steps.srtool_build.outputs.wasm }}
            ${{ steps.srtool_build.outputs.wasm_compressed }}
            ${{ matrix.chain }}-srtool-digest.json
            ${{ matrix.chain }}-info.json
            ${{ matrix.chain }}-compressed-info.json
            ${{ matrix.chain }}-metadata.json
            ${{ matrix.chain }}-diff.txt

  build_binary:
    name: Build binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
        - x86_64-unknown-linux-gnu
        - aarch64-unknown-linux-gnu
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install ARM64 multilib
        if: contains(matrix.target, 'aarch64')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          mkdir .cargo
          printf '[target.aarch64-unknown-linux-gnu]\nlinker = "aarch64-linux-gnu-gcc"' > .cargo/config
      
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true
          
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          default: true
          profile: minimal
          target: ${{ matrix.target }}
          toolchain: stable
          
      - name: Install WASM target (for runtime building)
        shell: bash
        run: rustup target add wasm32-unknown-unknown --toolchain ${{ env.RUST_TOOLCHAIN }}
     
      - name: Build optimized binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: ice-binary-${{ matrix.target }}
          path: target/release/ice-node

  release:
    name: Build and publish Runtime
    runs-on: ubuntu-latest
    
    needs:
      - build_binary
      - build_runtime

    steps:
    
      - name: Create Tag
        uses: laputansoft/github-tag-action@v4.6
        with:
          tag: ${{ github.event.inputs.tag }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate template data
        run: |
            TAG=${{ github.event.inputs.tag }}
            SRTOOL_DETAILS=$(cat arctic-srtool-digest.json)
            SUBWASM_DETAILS=$(cat arctic-subwam-info.json)
            echo 'Template data:'
            jq -n \
              --arg tag "$TAG" \
              --arg srtool_details "$SRTOOL_DETAILS" \
              --arg subwasm_details "$SUBWASM_DETAILS" \
              '{
                tag: $tag,
                srtool_details: $srtool_details,
                subwasm_details: $subwasm_details
              }' | tee template_data.json

      - name: Publish github release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ice-node
            ${{ steps.srtool_build.outputs.wasm }}
            ${{ steps.srtool_build.outputs.wasm_compressed }}
          body_path: ".github/release-template.md"
          tag_name: ${{ github.event.inputs.tag }}
          name: "${{ github.event.inputs.tag }}"
          token: ${{ secrets.GITHUB_TOKEN }}
